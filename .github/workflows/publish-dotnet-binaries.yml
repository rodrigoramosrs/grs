name: Publish .NET Core binaries

on:
  push:
    branches:
      - main

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

jobs:
  compile_binaries:
    name: Compile binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: windows-latest
            target_os: windows
            arch_list: "win-x64,win-arm64"
          - os: ubuntu-latest
            target_os: linux
            arch_list: "linux-x64"
          - os: macos-latest
            target_os: macos
            arch_list: "osx-x64"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Build and package binaries
        shell: bash
        run: |
          set -e
          version=${{ github.run_number }}
          # Create directories for output
          mkdir -p ./release/self ./release/dependant ./release/packages/self ./release/packages/dependant
          
          IFS=',' read -ra arch_list <<< "${{ matrix.arch_list }}"
          for arch in "${arch_list[@]}"; do
            os_filename="${{ matrix.target_os }}-$arch"
            release_standalone="grs-${version}-standalone-${os_filename}"
            release_framework="grs-${version}-${os_filename}"
  
            echo "Building for arch: $arch on ${{ matrix.target_os }}"
            dotnet restore ./src/grs.sln
            
            # Publish self-contained (standalone)
            dotnet publish ./src/grs.csproj --configuration Release --self-contained true --runtime "$arch" -o "./release/self/${release_standalone}"
  
            # Publish framework-dependent version
            dotnet publish ./src/grs.csproj --configuration Release --self-contained false --runtime "$arch" -o "./release/dependant/${release_framework}"
  
            # Package the binaries according to OS
            if [[ "${{ matrix.target_os }}" == "windows" ]]; then
              7z a -tzip "./release/packages/self/${release_standalone}.zip" "./release/self/${release_standalone}/*"
              7z a -tzip "./release/packages/dependant/${release_framework}.zip" "./release/dependant/${release_framework}/*"
            else
              tar czvf "./release/packages/self/${release_standalone}.tar.gz" -C "./release/self" "${release_standalone}"
              tar czvf "./release/packages/dependant/${release_framework}.tar.gz" -C "./release/dependant" "${release_framework}"
            fi
  
            # Clean up build folders after packaging
            rm -rf "./release/self/${release_standalone}"
            rm -rf "./release/dependant/${release_framework}"
          done

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: "grs-${{ github.run_number }}-${{ matrix.target_os }}"
          path: ./release/packages

  release:
    name: Create release
    needs: [compile_binaries]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
